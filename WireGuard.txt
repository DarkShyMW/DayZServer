1. Устанавливаем защищенный туннель WireGuard с BD-1:
	apt install wireguard wireguard-tools

2. Создаем директорию для хранения ключей шифрования:
	mkdir /etc/wireguard/keys
	cd /etc/wireguard/keys - перемещаемся в директорию

3. Генерируем открытые и закрытые ключи для сервера и клиента:
	wg genkey | tee serv-priv.key | wg pubkey > serv-pub.key - общая команда для генерации пары ключей сервера
	wg genkey | tee cli-priv.key | wg pubkey > cli-pub.key - общая команда для генерации пары ключей клиента

4. На RTR-L, выступающим в роли сервера, создаём и редактируем файл конфигурации и приводим к следующему виду:
	cat serv-priv.key cli-pub.key >> /etc/wireguard/wg0.conf- выводим значение ключей сразу в файл конфигурации; важно не перепутать ключи, поэтому лучше запомнить порядок добавления ключей в файл, они будут представлены в виде 2-х строк
	vim /etc/wireguard/wg0.conf

[Interface]
Address = 10.20.30.1/30 - туннельный адрес сервера
ListenPort = 12345 - порт, на котором будет работать туннель (можно указать свой, но динамический)
PrivateKey = <Server_Private_Key> - здесь закрытый ключ сервера, который мы уже добавили в файл

[Peer]
PublicKey = <Client_Public_Key> - открытый ключ клиента, который мы уже добавили в файл
AllowedIPs = 10.20.30.0/30, 172.16.100.0/24 - разрешаем ходить трафику из данных сетей (аналогично добавлению маршрутов)

5. Запускаем туннель:
	systemctl enable --now wg-quick@wg0 - ставим в автозагрузку и сразу запускаем
	service wg-quick@wg0 status - проверяем статус сервиса
	wg show wg0 - проверяем состояние туннеля

6. Настраиваем RTR-R, выступающий в роли клиента, предварительно выполнив шаги 1 и 2:

На машине RTR-L:
	cd /etc/wireguard/keys
	scp serv-pub.key cli-priv.key 5.5.5.100:/etc/wireguard/keys - копируем эти ключи на клиент с помощью протокола SSH (SSH на RTR-R должен быть предварительно настроен)

На машине RTR-R:
	cat cli-priv.key serv-pub.key >> /etc/wireguard/wg0.conf - анлогично выводим значение ключей в файл
	vim /etc/wireguard/wg0.conf

[Interface]
Address = 10.20.30.2/30 - туннельный адрес клиента
PrivateKey = <Client_Private_Key> - закрытый ключ клиента

[Peer]
PublicKey = <Server_Public_Key> - открытый ключ сервера
Endpoint = 4.4.4.100:12345 - внешний (!) адрес сервера и указанный нами раннее порт
PersistentKeepalive = 10 - необходимо для поддержки работы туннеля; отправлять служебные пакеты каждые 10 секунд
AllowedIPs = 10.20.30.0/30, 192.168.100.0/24 - маршруты

7. Руководствуясь 5 пунктом, запускаем туннель на клиенте и проверяем статус

8. Проверка работоспособности и troubleshooting:
	ping 10.20.30.1 - сначала пингуем RTR-L с RTR-R, чтобы туннель инициализировался
	ping 172.16.100.254 или ping 192.168.100.254 - проверяем, что локальные сети доступны через туннель
	wg show wg0 - проверяем состояние туннеля при необходимости

Возможные проблемы:
	1) Сервис не стартует - проверяем конфигурацию WireGuard
	2) Сервер и клиент не пингуют друг друга - проверяем настройку firewalld (все ли порты открыты); в тяжелых случаях проверяем, не перепутали ли вы ключи в файле конфигурации
	3) Не пингуются локальные сети - проверяем маршруты командой "ip r"

NB! Для того, чтобы работал проброс SSH на Web-R, необходимо на RTR-L добавить интерфейс wg0 в зону trusted и включить в этой зоне маскарадинг






